05 -  Adicionando e Exibindo a Capa do Livro


01 - Salvando a Imagem no Servidor
Salvando qualquer tipo de arquivo.

- Criado campo no JSF, viwer, para enviar arquivo para o servidor.

	<div>
		<h:outputLabel value="Capa do Livro" />
		<h:inputFile value="#{adminLivrosBean.capaLivro}" id="capaLivro" />
		<h:message for="capaLivro" />
	</div>
- Adicionado o tipo de arquivo que está sendo enviado no request

<h:form enctype="multipart/form-data">

- Criado o campo capaLivo no MannagerBean, do tipo Part(aqruivo do Javaee 7)
	private Part capaLivro;

- Gravado arquivo em disco, pelo comando write
	capaLivro.write("/home/edilson/workspace/casadodocodigojavaee/documentos/" + capaLivro.getSubmittedFileName());


02 - Criando o campo para seleção de arquivo

<h:form enctype="multipart/form-data">
    <!-- Os demais campos continuam aqui! -->
    <div>
        <h:outputLabel value="Capa do Livro" />
        <h:inputFile value="#{adminLivrosBean.capaLivro}" id="capaLivro" />
        <h:message for="capaLivro" />
    </div>
    <h:commandButton value="Cadastrar" action="#{adminLivrosBean.salvar}" />
</h:form>


03 - Enviando arquivos no JavaEE 
Como ficou facilitado o upload de arquivos no JavaEE 7?

Através do componente <h:inputFile> no JSF e do objeto Part que já encapsula a complexidade de receber o arquivo e transferi-lo para o disco. Agora ficou muito mais simples, bastando apenas chamar o método write() do objeto Part.

04 - Recebendo o arquivo no Bean e salvando no disco

import javax.servlet.http.Part;
public class AdminLivrosBean {	
	private Livro livro = new Livro();	
	@Inject
	private LivroDAO livroDao;	
	@Inject
	private AutorDAO autorDao;
	@Inject
	private FacesContext context;	
	private Part capaLivro;	
	public String adiciona() throws IOException {
		livroDao.salvar(livro);		
		capaLivro.write("/home/edilson/workspace/casadodocodigojavaee/documentos/" + capaLivro.getSubmittedFileName());
//...
}
//...
	public Part getCapaLivro() {
		return capaLivro;
	}
	public void setCapaLivro(Part capaLivro) {
		this.capaLivro = capaLivro;
	}
}

05 - Salvando o Path da Capa do Livro
Criar uma classe de infrainstrutura que salve os arquivos no banco de dados. e apenas retorne o caminho para ser salvo no Livro.

06 - Alterando o Livro para salvar a capa

- Criar campo capaPath para armazenar o caminho onde o arquivo será salvo

@Entity
public class Livro {
	//...
	private String capaPath;
	//...
	public String getCapaPath() {
		return capaPath;
	}

	public void setCapaPath(String capaPath) {
		this.capaPath = capaPath;
	}
}

07 - Recebendo o arquivo no AdminLivrosBean
Recebe na variável capaLivro e armazena em disco pelo camando wirite, ter um infraestrutura que armane esse arquivo no servidor.
FileSaver fileSaver = new FileSaver();
livro.setCapaPath(fileSaver.write(capaLivro, "docuementos"));


08 - Criando o método write do FileSaver
Criar arquivo de infra estrutura para gravar arquivo no servidor e retonar o path de onde o arquivo foi salvo.
public class FileSaver {
	
	private static final String SERVER_PATH = "/home/edilson/workspace/casadodocodigojavaee/";	
	public String write(Part arquivo, String path) {
		String relativePath = path + "/" + arquivo.getSubmittedFileName();
		try {
			arquivo.write(SERVER_PATH + relativePath);			
			return relativePath;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
}


09 - Obtendo a Capa do FileSystem

Criar uma Classe que acesse o arquivo no servidor, pelo Servilet, atendo as requisições, request de uma url 
http://algma cosia/file/caminho + nome do arquivo.

10 - Criando coluna para a Capa do Livro
Coluna que mostra uma imagem tendo como fonte(scr) a classe request.
<h:column>
	<f:facet name="header">Capa</f:facet>
	<img src="#{request.contextPath}/file/#{livro.capaPath}" 
			  height="30%" alt="#{livro.titulo}"/>
</h:column>

11 - Criando o Servlet de File

1 - Criar uma classe FileServlet que herde de HttpServlet.
public class FileServlet extends HttpServlet{
}

2 - Sobrescrever o método service
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException 	}
}

3 - Anotar a classe com WebServlet e leia as request de "file"

@WebServlet("/file/*")
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
	}
}

4 - Pegue o nome e diretório onde está o arquivo recebido pela request.

Utilizar o métod getRequestURI() do req vindo por parâmetro, que quebra a request em um array pelo "/file/" e retorna o [1], parte posição a diretia do arraqui.
Exemplo: request http://localhost:8080/casadocodigo/file/documentos/BigData.png
split = [ http://localhost:8080/casadocodigo, /file/, documentos/BigData.png ]
path = documentos/BigData.png

@WebServlet("/file/*")
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		
		String path = req.getRequestURI().split("/file/")[1];
	}
}

5 - Setar parâmetros do browser para exibir arquivos.

# Um dos parâmetros é o ContetType para isso deve:

- Cria a fonte(source) com o caminho real do arquivo no servidor.

@WebServlet("/file/*")
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String path = req.getRequestURI().split("/file/")[1];		
		Path source = Paths.get(FileSaver.SERVER_PATH + "/" + path);
	}
}

- Instanciar o FileNameMap, para coletar as informações do arquivo.
@WebServlet("/file/*")
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		
		String path = req.getRequestURI().split("/file/")[1];		
		Path source = Paths.get(FileSaver.SERVER_PATH + "/" + path);
		FileNameMap fileNameMap = URLConnection.getFileNameMap(); 
	}
}

- Coletar o contentType do aruivo pela classe FileNameMap.
@WebServlet("/file/*")
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		
		String path = req.getRequestURI().split("/file/")[1];		
		Path source = Paths.get(FileSaver.SERVER_PATH + "/" + path);
		FileNameMap fileNameMap = URLConnection.getFileNameMap();
		String contentTypeFor = fileNameMap.getContentTypeFor("file:" + source);
	}
}

- Setar o contentType
@WebServlet("/file/*")
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		
		String path = req.getRequestURI().split("/file/")[1];		
		Path source = Paths.get(FileSaver.SERVER_PATH + "/" + path);
		FileNameMap fileNameMap = URLConnection.getFileNameMap();
		String contentTypeFor = fileNameMap.getContentTypeFor("file:" + source);

		resp.setContentType(contentTypeFor);
	}
}

# Setar o Header com o tamanho do arquivo
@WebServlet("/file/*")
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		
		String path = req.getRequestURI().split("/file/")[1];		
		Path source = Paths.get(FileSaver.SERVER_PATH + "/" + path);
		FileNameMap fileNameMap = URLConnection.getFileNameMap();
		String contentTypeFor = fileNameMap.getContentTypeFor("file:" + source);

		resp.setContentType(contentTypeFor);
		resp.setHeader("Content-Length", String.valueOf(Files.size(source)));
	}
}

# Setar o Header com o nome do arquivo que será exibido.
@WebServlet("/file/*")
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		
		String path = req.getRequestURI().split("/file/")[1];		
		Path source = Paths.get(FileSaver.SERVER_PATH + "/" + path);
		FileNameMap fileNameMap = URLConnection.getFileNameMap();
		String contentTypeFor = fileNameMap.getContentTypeFor("file:" + source);

		resp.setContentType(contentTypeFor);
		resp.setHeader("Content-Length", String.valueOf(Files.size(source)));
		resp.setHeader("Content-Disposition", "filename=\""+source.getFileName().toString() + "\"");
	}
}

# Restar o response para ter serteza que ele não tem nem uma informação anterior.
@WebServlet("/file/*")
public class FileServlet extends HttpServlet{
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		
		String path = req.getRequestURI().split("/file/")[1];		
		Path source = Paths.get(FileSaver.SERVER_PATH + "/" + path);
		FileNameMap fileNameMap = URLConnection.getFileNameMap();
		String contentTypeFor = fileNameMap.getContentTypeFor("file:" + source);

		resp.reset();
		resp.setContentType(contentTypeFor);
		resp.setHeader("Content-Length", String.valueOf(Files.size(source)));
		resp.setHeader("Content-Disposition", "filename=\""+source.getFileName().toString() + "\"");
	}
}

# Criar método transfer() na classe FileSaver.
Esse método é resposável por transferir arquivos do Servidor para o browser do cliente.

- Recebe por parâmetro o caminho do arquivo no servidor(Path) e a saída para o browser OutputStream). 

public class FileSaver {
//...
public static void transfer(Path source, OutputStream outputStream) {
		
	}
}

- Fazer entrada do arquivo do arquivo na Aplicação, pelo caminho Path passado por parâmetro.
public static void transfer(Path source, OutputStream outputStream) {
	try {
		FileInputStream input = new FileInputStream(source.toFile());
	} catch (FileNotFoundException e) {
		throw new RuntimeException(e);
	}
}

- Criar canais de entrada e saída desse arquivos do arquivo no servidor(source) para saída(outputStream)

* Canal de entrada.
try(
	ReadableByteChannel inpuChannel = Channels.newChannel(input);){

	} catch (IOException e) {
		throw new RuntimeException(e);
}
Desse forma cria o canal e o próprui try já fecha o recurso.

* Canal de saída
try(
	ReadableByteChannel inputChannel = Channels.newChannel(input);
	WritableByteChannel outputChannel = Channels.newChannel(outputStream)
    ){		   
} catch (IOException e) {
	throw new RuntimeException(e);
}

12 - Transferindo o arquivo do servidor para o response
- Criar um buffer para ler outputStream do canal de entrada e gravar no canal de saída.
{
ByteBuffer buffer = ByteBuffer.allocateDirect(1024 *10); // CRIA UM BUFFER DE 10KBYTES
while(inputChannel.read(buffer) != -1 ) {
  buffer.flip();                                         //MARCA O BUFFER PARA LER DA POSIÇÃO ZERO.
  outputChannel.write(buffer);
  buffer.clear();
}

- Adicionar a chamada do método: FileSaver.transfer(source, resp.getOutputStream()); na classe FileServlet

13 - Exibindo a Capa do Livro na Listagem
<h:column>
	<f:facet name="header">Capa</f:facet>
	<a href="#{request.contextPath}/file/#{livro.capaPath}">
		<img src="#{request.contextPath}/file/#{livro.capaPath}"  
			 height="30%" alt="#{livro.titulo}"/>
    </a>		
</h:column>

 14 Conteúdo da aula.

Enviado projeto funcionando para o git.






