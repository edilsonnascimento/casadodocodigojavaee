06 - Criando a Home e o Detalhe do Livro

01 - Adicionando a Home Page da CDC

- Adicionado ao projeto um novo index, com a os tamplaites da Casa do Código da Caelum.
- Adicionado as tags abaixo ara listar os veículos on JSP
- Criado um novo Bean para atender essa nova home.xhtml(JSP).
- Adicionado no DAO Listas de livros para exibir na nova Home.
- E exibir as imagens.

02 - Baixando a home da Casa do Código

- Baixado zip do link https://s3.amazonaws.com/caelum-online-public/java-ee-webapp/casadocodigo-javaee-home.zip
- Importado para o projeto no diretorio de WEBAPP

03 - Editando a Home - Colocando os últimos lançamentos
<ui:repeat value="#{homeBean.ultimosLancamentos()}" var="livro">
<li class="livroNaVitrine vitrineDestaquinho-produto">
	<a href="https://www.casadocodigo.com.br/products/livro-certificacao-java-associate" class="livroNaVitrine-link"
			title="#{livro.titulo}">
		<div class="livroNaVitrine-imagemContainer" role="presentation">
			<img class="livroNaVitrine-imagem" 
				src="#{request.contextPath}/file/#{livro.capaPath}" 
					alt="#{livro.titulo}" title="#{livro.titulo}" />
		</div>
		<span class="livroNaVitrine-nome">#{livro.titulo}</span>
	</a>
</li>
</ui:repeat>

04 - Editando a Home - Adicionando os demais livros
<ui:repeat var="livro" value="#{homeBean.demaisLivros()}">
<li class="livroNaVitrine vitrineDaColecao-produto">
	<a href="https://www.casadocodigo.com.br/products/livro-certificacao-java-associate" class="livroNaVitrine-link" 
		title="#{livro.titulo}">
		<div class="livroNaVitrine-imagemContainer" role="presentation">
			<img class="livroNaVitrine-imagem" src="#{request.contextPath}/file/#{livro.capaPath}" 
				alt="#{livro.titulo}" title="#{livro.titulo}" />
		</div>
		<span class="livroNaVitrine-nome">#{livro.titulo}</span>
	</a>
</li>
</ui:repeat>


05-Criando o Bean da Home
@Model
public class HomeBean {
	@Inject
	private LivroDAO livroDAO;	
	public List<Livro> ultimosLancamentos() {
		return livroDAO.cincoUltimosPublicados();
	}	
	public List<Livro> demaisLivros(){
		return livroDAO.demaisLivros();
	}
}


06 - Alterando o LivroDao para a Home
@Stateless
public class LivroDAO {	
//...
	public List<Livro> cincoUltimosPublicados() {
		return manager.createQuery("SELECT l FROM Livro l ORDER BY l.dataPublicacao DESC", Livro.class)
				      .setMaxResults(5)
				      .getResultList();
	}
	public List<Livro> demaisLivros() {
		return manager.createQuery("SELECT l FROM Livro l", Livro.class)
				      .setFirstResult(5)
				      .getResultList();
	}
}


07 - Criando o Detalhe do Livro

- Importar arquivo com o detalhe de livro do link: https://s3.amazonaws.com/caelum-online-public/java-ee-webapp/casadocodigo-javaee-detalhe.zip.
- Criar no ManagedBean para controlar esse novo JSP.
- Criar método que recebe um ID e retorna um objeto livro para ser exibido na tela detalhe.

08 - Adicionando a página de detalhe do Livro
- Baixado arquivo e adicionado ao projeto.

09 - Carregando os detalhes do Livro
Ao final das alterações, seu código deve ficar assim:

Chamando os métodos via GET, pega os parâmetros do browser. 
http://localhost:8080/casadocodigo/detalhe-livro.xhtml?id=9
<f:metadata>
    <f:viewParam id="id" name="id" value="#{livroDetalheBean.id}"/> // CARREGA ANTES DE INICIAR O JSP.
    <f:viewAction action="#{livroDetalheBean.carregarDetalhe()}"/>
</f:metadata>


10 - Carregando os Autores do Livro

- Alterado DAO para carregar os livros com os autores.
public Livro buscaPorId(Integer id) {
	return manager.createQuery("SELECT l FROM Livro l JOIN FETCH l.autores"
			                 + " WHERE l.id = :id", Livro.class)
			      .setParameter("id", id)
			      .getSingleResult();
}

- ALterar a viwer para mostrar a capa dos livros e a página.


11 - Carregando Livro com Autores
O que são Planned Queries e porque usá-las em nossos sistemas?

Planned Queries são queries em cuja construção trazemos o objeto principal, além dos relacionamentos diretos que vamos usar junto do objeto principal. Assim evitamos idas desnecessárias ao banco, o que chamávamos Lazy.


12- Usando o Extended Entity Manager

Uma forma de resolver a lazy com notações do EJB

@Stateful
public class LivroDAO {

@PersistenceContext(type=PersistenceContextType.EXTENDED)
pri
//...
public Livro buscaPorId(Integer id) {
	return manager.find(Livro.class, id);
}	


13 - Carregando o Livro e evitando LazyInitializationException

@Stateful
public class LivroDAO {

@PersistenceContext(type=PersistenceContextType.EXTENDED)
pri
//...
public Livro buscaPorId(Integer id) {
	return manager.find(Livro.class, id);
}	

14 - Projeto Final
https://github.com/alura-cursos/java-ee-webapp/archive/f934f7f0f46f88beb5fa31b8ff0fe5daf53bd9ce.zip


15 – Conclusão
Parte dois curso.











06 - Criando a Home e o Detalhe do Livro
